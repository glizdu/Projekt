# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from labbot/msgFromLabbot.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class msgFromLabbot(genpy.Message):
  _md5sum = "4bf0f6e2fd2b507f5c1d51ceec5b93b5"
  _type = "labbot/msgFromLabbot"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# right motor parameters
float32 motorRightInput
float32 motorRightSetpoint
float32 motorRightOutput
# left motor parameters
float32 motorLeftInput
float32 motorLeftSetpoint
float32 motorLefttOutput
"""
  __slots__ = ['motorRightInput','motorRightSetpoint','motorRightOutput','motorLeftInput','motorLeftSetpoint','motorLefttOutput']
  _slot_types = ['float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motorRightInput,motorRightSetpoint,motorRightOutput,motorLeftInput,motorLeftSetpoint,motorLefttOutput

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(msgFromLabbot, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motorRightInput is None:
        self.motorRightInput = 0.
      if self.motorRightSetpoint is None:
        self.motorRightSetpoint = 0.
      if self.motorRightOutput is None:
        self.motorRightOutput = 0.
      if self.motorLeftInput is None:
        self.motorLeftInput = 0.
      if self.motorLeftSetpoint is None:
        self.motorLeftSetpoint = 0.
      if self.motorLefttOutput is None:
        self.motorLefttOutput = 0.
    else:
      self.motorRightInput = 0.
      self.motorRightSetpoint = 0.
      self.motorRightOutput = 0.
      self.motorLeftInput = 0.
      self.motorLeftSetpoint = 0.
      self.motorLefttOutput = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.motorRightInput, _x.motorRightSetpoint, _x.motorRightOutput, _x.motorLeftInput, _x.motorLeftSetpoint, _x.motorLefttOutput))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.motorRightInput, _x.motorRightSetpoint, _x.motorRightOutput, _x.motorLeftInput, _x.motorLeftSetpoint, _x.motorLefttOutput,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.motorRightInput, _x.motorRightSetpoint, _x.motorRightOutput, _x.motorLeftInput, _x.motorLeftSetpoint, _x.motorLefttOutput))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.motorRightInput, _x.motorRightSetpoint, _x.motorRightOutput, _x.motorLeftInput, _x.motorLeftSetpoint, _x.motorLefttOutput,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
